---
# Prerequisites:
## Modify the inventory file to reflect your environment
## The user must have password-less sudo access
## The user must have password-less ssh access to the remote hosts
## You need a Pull Secret from the RH Registry: https://cloud.redhat.com/openshift/install/pull-secret

- name: Downloads OpenShift and Operator Catalog container images and stores them as TAR files to be transported into a disconnected enclave
  hosts: localhost
  gather_facts: true
  become: true
  tasks:
    - name: Make sure basic packages are installed
      ansible.builtin.package:
        name: "{{ base_packages }}"
        state: present

    - name: Setup Cockpit because I am a lazy admin
      when: setup_cockpit
      block:
        - name: Install Cockpit because it's nice to have
          ansible.builtin.package:
            name: ['cockpit', 'cockpit-storaged']
            state: present

        - name: Enable Cockpit
          ansible.builtin.service:
            name: cockpit.socket
            state: started
            enabled: true

    - name: Check for the oc binary
      block:
        - name: Check if oc is installed
          ansible.builtin.command: which oc
          changed_when: false
          failed_when: oc_installed.rc not in [0, 1]
          register: oc_installed

        - name: Install the oc binary
          when: oc_installed.rc not in [0]
          block:
            - name: Download the OC binary if it is not present
              ansible.builtin.get_url:
                url: https://mirror.openshift.com/pub/openshift-v4/{{ ansible_architecture }}/clients/ocp/stable/openshift-client-linux.tar.gz
                dest: /tmp/openshift-client-linux.tar.gz
                mode: 0755

            - name: Extract the oc binary
              ansible.builtin.unarchive:
                src: /tmp/openshift-client-linux.tar.gz
                dest: /usr/local/bin
                remote_src: true
                creates: /usr/local/bin/oc
                mode: 0755

            - name: Enable binary completion for oc
              ansible.builtin.shell: /usr/local/bin/oc completion bash > /etc/bash_completion.d/oc_completion.sh
              args:
                creates: /etc/bash_completion.d/oc_completion.sh

    - name: Check for the oc mirror plugin
      block:
        - name: Check if oc is installed
          ansible.builtin.command: which oc-mirror
          changed_when: false
          failed_when: oc_mirror_installed.rc not in [0, 1]
          register: oc_mirror_installed

        - name: Install the oc-mirror plugin
          when: oc_mirror_installed.rc not in [0]
          block:
            - name: Download the oc-mirror plugin
              ansible.builtin.get_url:
                url: https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/stable/oc-mirror.tar.gz
                dest: /tmp/oc-mirror.tar.gz
                mode: 0755

            - name: Extract the oc-mirror binary
              ansible.builtin.unarchive:
                src: /tmp/oc-mirror.tar.gz
                dest: /usr/local/bin
                remote_src: true
                creates: /usr/local/bin/oc-mirror
                mode: 0755

            - name: Enable binary completion for oc-mirror
              ansible.builtin.shell: /usr/local/bin/oc-mirror completion bash > /etc/bash_completion.d/oc-mirror_completion.sh
              args:
                creates: /etc/bash_completion.d/oc-mirror_completion.sh

    - name: Make sure that the root user has /usr/local/bin in its PATH
      block:
        - name: Check if /usr/local/bin is already defined
          ansible.builtin.lineinfile:
            state: absent
            path: "/root/.bashrc"
            regexp: "/usr/local/bin"
          check_mode: true
          changed_when: false # This just makes things look prettier in the logs
          register: path_check

        - name: Define /usr/local/bin if undefined
          ansible.builtin.lineinfile:
            state: present
            path: "/root/.bashrc"
            line: "export PATH=$PATH:/usr/local/bin"
          when: path_check.found == 0

    - name: Get the path to oc, discount double check
      ansible.builtin.command:
        cmd: which oc
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      register: oc_path
      changed_when: false

    - name: Create the $HOME/.docker directory
      ansible.builtin.file:
        path: /root/.docker
        state: directory
        owner: root
        group: root
        mode: 0700

    - name: if target_mirror_path does not exist create the directory 
      ansible.builtin.file:
        path: "{{ target_mirror_path }}"
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Copy the Red Hat Registry Pull Secret to the remote host
      when: local_rh_pull_secret_path is defined
      ansible.builtin.copy:
        src: "{{ local_rh_pull_secret_path }}"
        dest: "{{ target_rh_pull_secret_path }}"
        mode: 0600
        backup: true

    - name: Store the Red Hat Registry Pull Secret on the remote host when defined as a variable
      when: local_rh_pull_secret_path is not defined and rh_pull_secret is defined
      ansible.builtin.copy:
        content: "{{ rh_pull_secret }}"
        dest: "{{ target_rh_pull_secret_path }}"
        mode: 0600
        backup: true

    - name: Clear the mirror path if requested
      when: clean_mirror_path
      block:
        - name: Find any tar files that were already packaged
          ansible.builtin.find:
            paths: "{{ target_mirror_path }}/"
            patterns: "*.tar"
          register: tar_files_to_delete

        - name: Delete tar files
          ansible.builtin.file:
            path: "{{ tar_file.path }}"
            state: absent
          loop: "{{ tar_files_to_delete.files }}"
          loop_control:
            loop_var: tar_file

        - name: Delete general files
          ansible.builtin.file:
            path: "{{ path_item }}"
            state: absent
          loop:
            - "{{ target_mirror_path }}/oc-mirror-workspace/"
            - "{{ target_mirror_path }}/publish/"
          loop_control:
            loop_var: path_item

    - name: Ensure there's enough space for an OpenShift release
      register: available_space
      ansible.builtin.command:
        cmd: df --output=avail {{ target_mirror_path }}
      changed_when: false

    - name: Fail if the space is less than 30Gb per OpenShift Release defined
      when: available_space.stdout_lines[1] | int < (30000000 * openshift_releases | length)
      ansible.builtin.fail:
        msg: "There is not enough space available in {{ target_mirror_path }} to store the OpenShift release"

    - name: Determine the target OpenShift Operator Catalog package channels
      ansible.builtin.include_tasks:
        file: tasks/get-operator-catalog-channels.yml
      loop: "{{ operators }}"
      loop_control:
        loop_var: operator

    - name: Template the imageSetConfig file
      ansible.builtin.template:
        src: imageset-config.yml.j2
        dest: "{{ target_mirror_path }}/imageSetConfig.yml"
        mode: 0644
        owner: root
        group: root

    - name: Assemble the oc mirror command
      ansible.builtin.set_fact:
        oc_mirror_cmd: >-
          {{ oc_path.stdout }} mirror {% if skip_cleanup %}--skip-cleanup {% endif %} {% if continue_on_error %}--continue-on-error {% endif %} {% if skip_missing %}--skip-missing {% endif %} --max-per-registry={{ max_per_registry }} --config {{ target_mirror_path }}/imageSetConfig.yml file://

    - name: Display the oc mirror command
      ansible.builtin.debug:
        msg: "{{ oc_mirror_cmd }}"

    - name: Run the mirroring process asynchronously for 2 hours
      ansible.builtin.command:
        cmd: "{{ oc_mirror_cmd }}"
        chdir: "{{ target_mirror_path }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin"
      async: 7200  # Set the timeout for 2 hours (7200 seconds)
      poll: 10     # Set how often to check the status (in seconds)
      register: oc_mirror_async_output
      become: yes  # If the command requires elevated privileges

    - name: Print job ID for debugging
      ansible.builtin.debug:
        msg: "Async job ID is {{ oc_mirror_async_output.ansible_job_id }}"

    - name: Copy job ID to file
      ansible.builtin.copy:
        content: "{{ oc_mirror_async_output.ansible_job_id }}"  
        dest: /tmp/mirror_job_id.txt

    - name: Verify ID file contents
      ansible.builtin.stat:
        path: /tmp/mirror_job_id.txt
      register: id_file_stat

    - name: Print ID file contents
      ansible.builtin.debug:
        msg: "ID file contains '{{ id_file_stat.stat.md5 }}'"
      when: id_file_stat.stat.exists and id_file_stat.stat.md5 is defined

    - name: Check if job results file exists
      ansible.builtin.stat:
        path: "/root/.ansible_async/{{ oc_mirror_async_output.ansible_job_id }}"
      register: job_file

    - name: Check async status
      ansible.builtin.async_status:
        jid: "{{ oc_mirror_async_output.ansible_job_id }}"
      register: job_status
      until: job_status.finished
      retries: 360
      when: job_file.stat.exists

    - name: Print ID used for status check
      ansible.builtin.debug:
        msg: "Looked up async job ID '{{ oc_mirror_async_output.ansible_job_id }}'"